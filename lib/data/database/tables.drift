import 'converter.dart';

CREATE TABLE counters (
  "id" BLOB NOT NULL PRIMARY KEY DEFAULT (randomblob(16)) MAPPED BY `const UUIDConverter()`,
  "title" TEXT,
  "value" INT NOT NULL DEFAULT 0,
  "table_order" INT NOT NULL,
  "negative" BOOL NOT NULL DEFAULT true,
  "step" INT NOT NULL DEFAULT 1,
  "updated_date" INTEGER NOT NULL DEFAULT (strftime('%s', CURRENT_TIMESTAMP)) MAPPED BY `const UTCDateTimeConverter()`,
  "created_date" INTEGER NOT NULL DEFAULT (strftime('%s', CURRENT_TIMESTAMP)) MAPPED BY `const UTCDateTimeConverter()`
);

CREATE TABLE counters_updates (
    "id" INTEGER PRIMARY KEY AUTOINCREMENT,
    "counter_id" BLOB NOT NULL,
    "datetime" INTEGER NOT NULL MAPPED BY `const UTCDateTimeConverter()`,
    "value" INTEGER NOT NULL
);

createCounter: INSERT INTO counters
    (title, "table_order", negative, step)
    VALUES
    (:title, IFNULL((SELECT MAX("table_order") FROM counters), 0) + 100, :negative, :step);

CREATE TRIGGER IF NOT EXISTS counter_update_timestamp
    AFTER UPDATE
    ON counters
    FOR EACH ROW
    BEGIN
        UPDATE counters
        SET updated_date = strftime('%s', CURRENT_TIMESTAMP)
        WHERE id = old.id;
    END;

CREATE TRIGGER IF NOT EXISTS counters_updates_trigger
    AFTER UPDATE
    OF "value"
    ON "counters"
    FOR EACH ROW
    BEGIN
        INSERT INTO "counters_updates"
        ("counter_id", "datetime", "value") VALUES
        (OLD.id, (strftime('%s', CURRENT_TIMESTAMP)), NEW.value - OLD.value);
    END;

CREATE TRIGGER IF NOT EXISTS counters_updates_clean_trigger
    AFTER DELETE
    ON "counters"
    FOR EACH ROW
    BEGIN
        DELETE FROM "counters_updates"
        WHERE "counter_id" = OLD.id;
    END;